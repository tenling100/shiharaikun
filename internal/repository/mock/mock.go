// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/tenling100/shiharaikun/internal/domain"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(id uint) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), id)
}

// MockCompanyRepository is a mock of CompanyRepository interface.
type MockCompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepositoryMockRecorder
}

// MockCompanyRepositoryMockRecorder is the mock recorder for MockCompanyRepository.
type MockCompanyRepositoryMockRecorder struct {
	mock *MockCompanyRepository
}

// NewMockCompanyRepository creates a new mock instance.
func NewMockCompanyRepository(ctrl *gomock.Controller) *MockCompanyRepository {
	mock := &MockCompanyRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepository) EXPECT() *MockCompanyRepositoryMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyRepository) CreateCompany(company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", company)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyRepositoryMockRecorder) CreateCompany(company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyRepository)(nil).CreateCompany), company)
}

// GetCompanyByID mocks base method.
func (m *MockCompanyRepository) GetCompanyByID(id uint) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", id)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockCompanyRepositoryMockRecorder) GetCompanyByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockCompanyRepository)(nil).GetCompanyByID), id)
}

// UpdateCompany mocks base method.
func (m *MockCompanyRepository) UpdateCompany(company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", company)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyRepositoryMockRecorder) UpdateCompany(company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyRepository)(nil).UpdateCompany), company)
}

// MockInvoiceDataRepository is a mock of InvoiceDataRepository interface.
type MockInvoiceDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceDataRepositoryMockRecorder
}

// MockInvoiceDataRepositoryMockRecorder is the mock recorder for MockInvoiceDataRepository.
type MockInvoiceDataRepositoryMockRecorder struct {
	mock *MockInvoiceDataRepository
}

// NewMockInvoiceDataRepository creates a new mock instance.
func NewMockInvoiceDataRepository(ctrl *gomock.Controller) *MockInvoiceDataRepository {
	mock := &MockInvoiceDataRepository{ctrl: ctrl}
	mock.recorder = &MockInvoiceDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceDataRepository) EXPECT() *MockInvoiceDataRepositoryMockRecorder {
	return m.recorder
}

// CreateInvoiceData mocks base method.
func (m *MockInvoiceDataRepository) CreateInvoiceData(invoiceData *domain.InvoiceData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceData", invoiceData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvoiceData indicates an expected call of CreateInvoiceData.
func (mr *MockInvoiceDataRepositoryMockRecorder) CreateInvoiceData(invoiceData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceData", reflect.TypeOf((*MockInvoiceDataRepository)(nil).CreateInvoiceData), invoiceData)
}

// GetInvoiceDataByID mocks base method.
func (m *MockInvoiceDataRepository) GetInvoiceDataByID(id uint) (*domain.InvoiceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceDataByID", id)
	ret0, _ := ret[0].(*domain.InvoiceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceDataByID indicates an expected call of GetInvoiceDataByID.
func (mr *MockInvoiceDataRepositoryMockRecorder) GetInvoiceDataByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceDataByID", reflect.TypeOf((*MockInvoiceDataRepository)(nil).GetInvoiceDataByID), id)
}

// GetInvoicesByDateRange mocks base method.
func (m *MockInvoiceDataRepository) GetInvoicesByDateRange(startDate, endDate string) ([]domain.InvoiceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesByDateRange", startDate, endDate)
	ret0, _ := ret[0].([]domain.InvoiceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesByDateRange indicates an expected call of GetInvoicesByDateRange.
func (mr *MockInvoiceDataRepositoryMockRecorder) GetInvoicesByDateRange(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesByDateRange", reflect.TypeOf((*MockInvoiceDataRepository)(nil).GetInvoicesByDateRange), startDate, endDate)
}

// UpdateInvoiceData mocks base method.
func (m *MockInvoiceDataRepository) UpdateInvoiceData(invoiceData *domain.InvoiceData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceData", invoiceData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvoiceData indicates an expected call of UpdateInvoiceData.
func (mr *MockInvoiceDataRepositoryMockRecorder) UpdateInvoiceData(invoiceData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceData", reflect.TypeOf((*MockInvoiceDataRepository)(nil).UpdateInvoiceData), invoiceData)
}
